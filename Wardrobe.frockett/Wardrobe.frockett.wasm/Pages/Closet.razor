@using Wardrobe.frockett.wasm.Models
@using System.IO
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json


@page "/closet"



<div class="container mx-auto">
    <h1 class="text-3xl font-bold mb-6">Closet</h1>

    <div class="mb-4">
        <button @onclick="OpenAddModal"
            class="transition-all bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Add New
            Item</button>
    </div>

    @if(isLoading) {
        <div style="width:100%; text-align:center">
            <h1 class="my-8 font-semibold text-3xl">Loading...</h1>
            <div style="display:flex; gap:10px; justify-content:center; align-items:center">
                <div class="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-e-transparent align-[-0.125em] text-surface motion-reduce:animate-[spin_1.5s_linear_infinite] dark:text-white"
                    role="status">
                    <span
                        class="!absolute !-m-px !h-px !w-px !overflow-hidden !whitespace-nowrap !border-0 !p-0 ![clip:rect(0,0,0,0)]">Loading...</span>
                </div>
            </div>
        </div>
    }
    else {

    
        <div class="grid grid-cols-[repeat(auto-fill,_200px)] gap-2 items-center">            
            @foreach (var item in clothingItems)
            {
                <div class="bg-white shadow-md rounded-lg p-4 flex flex-col justify-end w-48 h-72 hover:scale-105 transition-all">
                    <div class="overflow-hidden">
                    @if (item.ImageData != null)
                    {
                        <img src="@GetImageSrc(item.ImageData)" alt="@item.Name" width="150" height="auto" class="object-cover mb-2 rounded mx-auto" />
                    }
                    else
                    {
                        <div class="w-[150px] h-[150px] mx-auto bg-gray-300 mb-2 font-sans font-bold text-gray-700 flex items-center justify-center">NO IMAGE</div>
                    }
                    </div>
                    <div class="flex flex-col">
                        <div class="">
                            <h3 class="font-semibold truncate">@item.Name</h3>
                            <p class="text-sm text-gray-600">@item.Type</p>
                        </div>
                        <div class="flex justify-between mt-1">
                            <button @onclick="(() => OpenEditModal(item))" class="px-4 py-2 rounded-lg text-blue-600 hover:text-black hover:bg-gray-300 transition">Edit</button>
                            <button @onclick="(() => DeleteItem(item.Id))" class="px-4 py-2 rounded-lg text-red-600 hover:text-black hover:bg-gray-300 transition">Delete</button>
                        </div>
                    </div>
                </div>
            }
    </div>

    }
</div>



@if(showModal) {
        <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full" id="modal-overlay">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div class="mt-3 text-center">
                <h3 class="text-lg leading-6 font-medium text-gray-900">@(editingItem == null ? "Add New Item" : "Edit Item")</h3>
                <div class="mt-2 px-7 py-3">
                    <EditForm Model="@currentItem" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-4">
                            <label for="name" class="block text-gray-700 text-sm font-bold mb-2">Name:</label>
                            <InputText id="name" @bind-Value="currentItem.Name" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
                        </div>

                        <div class="mb-4">
                            <label for="type" class="block text-gray-700 text-sm font-bold mb-2">Type:</label>
                            <InputText id="type" @bind-Value="currentItem.Type" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
                        </div>

                        <div class="mb-4">
                            <label for="image" class="block text-gray-700 text-sm font-bold mb-2">Image (.png or .jpeg):</label>
                            <InputFile accept=".jpg, .jpeg, .png" OnChange="HandleFileSelection" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <p class="text-red-500 text-xs italic mt-2">@errorMessage</p>
                            }
                        </div>

                        <div class="items-center px-2">
                            <button type="submit" class="px-4 py-2 mt-4 bg-blue-500 text-white text-base font-medium rounded-md w-48 shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300">
                                Save
                            </button>
                        </div>
                    </EditForm>
                </div>
                <div class="items-center px-2 py-1">
                    <button @onclick="CloseModal" class="px-4 py-2 bg-gray-500 text-white text-base font-medium rounded-md w-48 shadow-sm hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-300">
                        Close
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ClothingItem> clothingItems = new();
    private bool showModal = false;
    private ClothingItem currentItem = new();
    private ClothingItem? editingItem;
    private HttpClient httpClient = new HttpClient();
    private IBrowserFile? selectedFile;
    private bool isLoading = true;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await FetchClothingItems();
    }

    private async Task FetchClothingItems()
    {
        isLoading = true;
        try
        {
            clothingItems = await httpClient.GetFromJsonAsync<List<ClothingItem>>("http://localhost:5256/api/closet") ?? new List<ClothingItem>();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"HTTP request error: {ex}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error fetching clothing items: {ex.Message}");
        }
        finally 
        {
            isLoading = false;
        }
    }

    private void OpenAddModal()
    {
        currentItem = new ClothingItem();
        editingItem = null;
        selectedFile = null;
        showModal = true;
    }

    private void OpenEditModal(ClothingItem item) {
        currentItem = new ClothingItem {
                Id = item.Id,
                Name = item.Name,
                Type = item.Type,
                ImageData = item.ImageData != null ? item.ImageData : null 
            };
        editingItem = item;
        selectedFile = null;
        showModal = true;
    }

    private void CloseModal()
    {
        errorMessage = string.Empty;
        showModal = false;
    }

    private async Task DeleteItem(int id)
    {
        try
        {
            var response = await httpClient.DeleteAsync($"http://localhost:5256/api/closet/{id}");
            if (response.IsSuccessStatusCode)
            {
                await FetchClothingItems();
            }
            else
            {
                Console.WriteLine($"Error deleting item: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting item: {ex.Message}");
        }
    }

    private string? GetImageSrc(string imageData)
    {
        if (string.IsNullOrEmpty(imageData))
        {
            return null;
        }

        // Check if the imageData already contains the data URI scheme
        if (imageData.StartsWith("data:image/"))
        {
            return imageData; // Return as-is if it's already in the correct format
        }

        byte[] bytes;
        try
        {
            bytes = Convert.FromBase64String(imageData);
        }
        catch (FormatException)
        {
            Console.WriteLine("Invalid base64 string.");
            return null;
        }

        // Check for JPEG file signature
        if (bytes.Length >= 3 && bytes[0] == 0xFF && bytes[1] == 0xD8 && bytes[2] == 0xFF)
        {
            return $"data:image/jpeg;base64,{imageData}";
        }
        // Check for PNG file signature
        else if (bytes.Length >= 4 && bytes[0] == 0x89 && bytes[1] == 0x50 && bytes[2] == 0x4E && bytes[3] == 0x47)
        {
            return $"data:image/png;base64,{imageData}";
        }
        else
        {
            Console.WriteLine("Unknown image file type.");
            return null;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (!string.IsNullOrEmpty(errorMessage)) 
        {
            return;
        }

        try
        {
            if (editingItem == null)
            {
                // Add new item
                var content = new MultipartFormDataContent();

                // Serialize the currentItem to JSON
                var itemJson = JsonSerializer.Serialize(currentItem);
                content.Add(new StringContent(itemJson), "item");

                if (selectedFile != null)
                {
                    var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10)); // 10 MB max
                    content.Add(fileContent, "image", selectedFile.Name);
                }

                var response = await httpClient.PostAsync("http://localhost:5256/api/closet", content);

                if (response.IsSuccessStatusCode)
                {
                    await FetchClothingItems();
                    CloseModal();
                }
                else
                {
                    Console.WriteLine($"Error adding item: {response.StatusCode}");
                }
            }
            else
            {
                // Edit existing item
                var content = new MultipartFormDataContent();

                // Serialize the currentItem to JSON
                var itemJson = JsonSerializer.Serialize(currentItem);
                content.Add(new StringContent(itemJson), "item");

                if (selectedFile != null)
                {
                    var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 1)); // 1 MB max
                    content.Add(fileContent, "image", selectedFile.Name);
                }

                var response = await httpClient.PutAsync($"http://localhost:5256/api/closet/{editingItem.Id}", content);

                if (response.IsSuccessStatusCode)
                {
                    await FetchClothingItems();
                    CloseModal();
                }
                else
                {
                    Console.WriteLine($"Error updating item: {response.StatusCode}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling form submission: {ex.Message}");
        }
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        errorMessage = string.Empty;
        if (selectedFile != null)
        {
            if (selectedFile.ContentType != "image/jpeg" && selectedFile.ContentType != "image/png") {
                errorMessage = "Only JPEG and PNG files are accepted.";
                selectedFile = null;
                return;
            }

            if (selectedFile.Size > 1024 * 1024 * 1) {
                errorMessage = "File size must be less than 1MB.";
                selectedFile = null;
                return;
            }

            var buffer = new byte[selectedFile.Size];
            await selectedFile.OpenReadStream().ReadAsync(buffer);
            string imageBase64 = Convert.ToBase64String(buffer);
            currentItem.ImageData = $"data:{selectedFile.ContentType};base64,{imageBase64}";
        }
    }
}