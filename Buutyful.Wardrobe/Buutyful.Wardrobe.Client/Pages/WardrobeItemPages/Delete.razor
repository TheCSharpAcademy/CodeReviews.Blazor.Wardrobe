@page "/wardrobeitems/delete"
@inject NavigationManager NavigationManager
@inject IHttpWardRobeClient _client

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>WardrobeItem</h4>
    <hr />
    @if (wardrobeitem is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">WardrobeId</dt>
            <dd class="col-sm-10">@wardrobeitem.WardrobeId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ImgUrl</dt>
            <dd class="col-sm-10">@wardrobeitem.ImgUrl</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ClothingType</dt>
            <dd class="col-sm-10">@wardrobeitem.ClothingType</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AddedAt</dt>
            <dd class="col-sm-10">@wardrobeitem.AddedAt</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@wardrobeitem.Description</dd>
        </dl>
        <EditForm method="post" Model="wardrobeitem" OnValidSubmit="DeleteWardrobeItem" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(wardrobeitem is null)">Delete</button> |
            <a href="/wardrobeitems">Back to List</a>
        </EditForm>
    }
</div>

@code {
    WardrobeItemResponse? wardrobeitem;

    [SupplyParameterFromQuery]
    public Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        wardrobeitem = await _client.GetByIdAsync(Id);

        if (wardrobeitem is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteWardrobeItem()
    {
        await _client.DeleteAsync(Id);
        NavigationManager.NavigateTo("/wardrobeitems");
    }
}
