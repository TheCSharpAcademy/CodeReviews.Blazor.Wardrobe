@page "/uploadImage"
@using Microsoft.Extensions.Logging
@*@inject ILogger<FileUpload1> Logger*@

<h3>Upload image</h3>

<p>
    <label>
        Upload an image of up to @maxFileSize bytes:
        <InputFile OnChange="@LoadFile" />
    </label>
</p>

@if (isLoading)
{
    <p>Uploading...</p>
}
else
{
    <ul>
        @foreach (var file in loadedFiles)
        {
            <li>
                <ul>
                    <li>Name: @file.Name</li>
                    <li>Last modified: @file.LastModified.ToString()</li>
                    <li>Size (bytes): @file.Size</li>
                    <li>Content type: @file.ContentType</li>
                    <li> <img class="preview" src="@imgData" /> </li>
                </ul>
            </li>
        }
    </ul>
}

@code {
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 1;
    private bool isLoading;
    private string? imgData;

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();
        var imgFile = e.File;

        //read that file in a byte array
        var buffer = new byte[imgFile.Size];
        await imgFile.OpenReadStream(1512000).ReadAsync(buffer);

        //convert byte array to base 64 string
        imgData = $"data:image;base64,{Convert.ToBase64String(buffer)}";

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            loadedFiles.Add(file);
        }

        isLoading = false;
    }
}