@page "/editItem/{id}"
@using Blazor.WardrobeInventory.Shared.Models
@inject HttpClient _httpClient
@inject NavigationManager navigationManager

<PageTitle>Wardrobe Inventory</PageTitle>

<h1>Edit Item</h1>

<EditForm Model=@item OnValidSubmit=@OnEdit>
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="Type">Type</label>
        <InputText @bind-Value=item.Type class="form-control" id="Type" placeholder="Shirt/Jeans/etc..." />
    </div>
    <div class="form-group">
        <label for="Color">Color</label>
        <InputText @bind-Value=item.Color class="form-control" id="Color" placeholder="White" />
    </div>
    <br />
    <img class="preview" src="@item.ImgData" />
    <br />
    <h4>Upload new image</h4>
    <p>
        <label>
            Upload an image of up to @maxFileSize bytes:
            <InputFile OnChange="@LoadFile" />
        </label>
    </p>
    @if (isLoading)
    {
        <p>Uploading...</p>
    }
    else
    {
        <ul>
            @foreach (var file in loadedFiles)
            {
                <li>
                    <ul>
                        <li>Name: @file.Name</li>
                        <li>Last modified: @file.LastModified.ToString()</li>
                        <li>Size (bytes): @file.Size</li>
                        <li>Content type: @file.ContentType</li>
                    </ul>
                </li>
            }
        </ul>
    }

    <input type="submit" class="btn btn-primary" value="Save" />
</EditForm>
@if (error)
{
    <p class="text-danger"> There was an error saving that item...</p>
}

@code {
    [Parameter]
    public string id { get; set; }
    WardrobeItem item = new WardrobeItem();
    private bool error = false;

    protected override async Task OnInitializedAsync()
    {
        item = await _httpClient.GetFromJsonAsync<WardrobeItem>($"api/wardrobe/{id}");
    }

    private async void OnEdit()
    {
        var response = await _httpClient.PutAsJsonAsync<WardrobeItem>($"api/wardrobe/{id}", item);
        if (response.IsSuccessStatusCode)
        {
            navigationManager.NavigateTo("/");
        }
        else
        {
            error = true;
            StateHasChanged();
        }
    }
}

@code {
    //image upload code
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 1;
    private bool isLoading;
    private string? imgData;

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        isLoading = true;
        StateHasChanged();
        loadedFiles.Clear();
        var imgFile = e.File;

        //read that file in a byte array
        var buffer = new byte[imgFile.Size];
        await imgFile.OpenReadStream(1512000).ReadAsync(buffer);

        //convert byte array to base 64 string
        imgData = $"data:image;base64,{Convert.ToBase64String(buffer)}";
        item.ImgData = imgData;
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            loadedFiles.Add(file);
        }

        isLoading = false;
        StateHasChanged();
    }
}
